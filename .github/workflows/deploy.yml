name: Deploy to AWS

on:
  push:
    branches: [ main, master ]

jobs:
  deploy:
    name: Terraform Apply & ECS Deploy
    runs-on: ubuntu-latest
    # se não houver outro job, REMOVA a linha abaixo
    # needs: validate_terraform

    defaults:
      run:
        working-directory: infra   # <- mantém todas as execuções em ./infra

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.5

      - name: Terraform init
        run: terraform init -input=false

      - name: Terraform apply
        env:
          TF_VAR_db_host            : ${{ secrets.DB_HOST }}
          TF_VAR_db_port            : ${{ secrets.DB_PORT }}
          TF_VAR_db_user            : ${{ secrets.DB_USER }}
          TF_VAR_db_password        : ${{ secrets.DB_PASSWORD }}
          TF_VAR_db_name            : ${{ secrets.DB_NAME }}
          TF_VAR_execution_role_arn : ${{ secrets.TF_VAR_execution_role_arn }}
        run: terraform apply -auto-approve

      # ---------- build & push da imagem ----------
      - uses: docker/setup-buildx-action@v3

      - name: Obter URL do ECR
        id: ecr
        run: |
          url=$(aws ecr describe-repositories \
                --repository-names clientservice \
                --query 'repositories[0].repositoryUri' \
                --output text)
          echo "url=$url" >> "$GITHUB_OUTPUT"

      - name: Login/push
        run: |
          aws ecr get-login-password --region us-east-1 | \
            docker login --username AWS --password-stdin ${{ steps.ecr.outputs.url }}
          docker build -t clientservice:${{ github.sha }} .
          docker tag  clientservice:${{ github.sha }} ${{ steps.ecr.outputs.url }}:${{ github.sha }}
          docker push ${{ steps.ecr.outputs.url }}:${{ github.sha }}

      # ---------- força novo deploy ----------
      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster $(terraform output -raw cluster_name) \
            --service $(terraform output -raw service_name) \
            --force-new-deployment

      # ---------- migrations ----------
      - name: Run migrations
        run: |
          aws ecs run-task \
            --cluster $(terraform output -raw cluster_name) \
            --launch-type FARGATE \
            --task-definition $(terraform output -raw task_definition_arn) \
            --network-configuration "awsvpcConfiguration={subnets=$(terraform output -json default_subnets),securityGroups=[\"$(terraform output -raw default_sg)\"],assignPublicIp=ENABLED}" \
            --overrides '{"containerOverrides":[{"name":"clientservice-svc","command":["alembic","upgrade","head"]}]}'
