name: Build, Push & Deploy to AWS

on:
  push:
    branches: [main, master]

env:
  AWS_REGION:   us-east-1
  SERVICE_NAME: client-service

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Login ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      # --- Novo passo: cria o repositório se necessário
      - name: Ensure ECR repository
        env:
          SERVICE_NAME: ${{ env.SERVICE_NAME }}
          AWS_REGION:   ${{ env.AWS_REGION }}
        run: |
          aws ecr describe-repositories \
               --repository-names "$SERVICE_NAME" \
               --region "$AWS_REGION" > /dev/null 2>&1 || \
          aws ecr create-repository \
               --repository-name "$SERVICE_NAME" \
               --image-scanning-configuration scanOnPush=true \
               --region "$AWS_REGION"

      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.ecr.outputs.registry }}/${{ env.SERVICE_NAME }}:${{ github.sha }}

      - name: Install jq
        run: sudo apt-get update -qq && sudo apt-get install -y jq

      - uses: hashicorp/setup-terraform@v2
        with: { terraform_version: 1.7.5 }

      - name: Terraform init
        run: terraform -chdir=infra init -input=false

      - name: Terraform apply
        env:
          TF_VAR_service_name : ${{ env.SERVICE_NAME }}
          TF_VAR_image_uri    : ${{ steps.ecr.outputs.registry }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          TF_VAR_db_host      : ${{ secrets.DB_HOST }}
          TF_VAR_db_port      : ${{ secrets.DB_PORT }}
          TF_VAR_db_user      : ${{ secrets.DB_USER }}
          TF_VAR_db_password  : ${{ secrets.DB_PASSWORD }}
          TF_VAR_db_name      : ${{ secrets.DB_NAME }}
        run: terraform -chdir=infra apply -auto-approve -input=false

      - name: Run migrations
        run: |
          cd infra
          CLUSTER=$(terraform output -raw cluster_name)
          TASK=$(terraform output -raw ecs_task_definition_arn)
          APP=$(terraform output -raw service_name)
          SUBNETS=$(terraform output -json default_subnets | jq -c)
          SG=$(jq -nc --arg sg "$(terraform output -raw default_sg)" '[$sg]')
          aws ecs run-task \
            --cluster "$CLUSTER" \
            --launch-type FARGATE \
            --task-definition "$TASK" \
            --network-configuration "awsvpcConfiguration={subnets=$SUBNETS,securityGroups=$SG,assignPublicIp=ENABLED}" \
            --overrides "{\"containerOverrides\":[{\"name\":\"$APP\",\"command\":[\"alembic\",\"upgrade\",\"head\"]}]}" \
            --region "$AWS_REGION"
