name: Deploy AWS – Client-Service

on:
  push:
    branches: [ master ]

env:
  AWS_REGION: us-east-1
  SERVICE_NAME: client-service
  PORT: 8000

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout
      - uses: actions/checkout@v4
      # 2) Credenciais do lab
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region:            ${{ secrets.AWS_REGION }}
          role-skip-session-tagging: true   # evita erro sts:TagSession :contentReference[oaicite:3]{index=3}

      # 3) Descobre Account-ID (garante que repo seja criado no MESMO ID) :contentReference[oaicite:4]{index=4}
      - name: Detect ACCOUNT_ID
        id: awsid
        run: |
          echo "ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV

      # 4) Instala Terraform
      - uses: hashicorp/setup-terraform@v2
        with: { terraform_version: 1.7.5 }

      # 5) Cria / importa repositório ECR
      - name: Terraform – ECR
        working-directory: infra/ecr          # <-- pasta onde estão os .tf
        env:
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_ecr_repo_name: ${{ env.SERVICE_NAME }}
        run: |
          terraform init -input=false
          terraform apply -auto-approve -input=false \
          || terraform import aws_ecr_repository.app_repo ${SERVICE_NAME}

      # 6) Docker & Buildx
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v5
        with:
         tags: ${{ env.REPO_URL }}:${{ github.sha }}
         push: true

      # 7) Repo URL para tag
      - name: Get ECR URL
        id: ecr
        run: |
          echo "REPO_URL=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${SERVICE_NAME}" >> $GITHUB_ENV

      # 8) Login no ECR (precisa ecr:GetAuthorizationToken) :contentReference[oaicite:5]{index=5}
      - name: ECR login
        run: |
          aws ecr get-login-password --region $AWS_REGION \
          | docker login --username AWS --password-stdin $REPO_URL

      # 9) Build & push
      - name: Build & push image
        run: |
          docker build -t $SERVICE_NAME .
          docker tag  $SERVICE_NAME:latest $REPO_URL:${{ github.sha }}
          docker push $REPO_URL:${{ github.sha }}

      # 10) Terraform – infra ECS/ALB
      - name: Terraform – ECS/ALB
        working-directory: infra/ecs
        env:
          TF_VAR_aws_region     : ${{ secrets.AWS_REGION }}
          TF_VAR_service_name   : ${{ env.SERVICE_NAME }}
          TF_VAR_container_port : ${{ env.PORT }}
          TF_VAR_image_uri      : $REPO_URL:${{ github.sha }}
          TF_VAR_exec_role_name : LabRole
          TF_VAR_db_host        : ${{ secrets.DB_HOST }}
          TF_VAR_db_port        : ${{ secrets.DB_PORT }}
          TF_VAR_db_user        : ${{ secrets.DB_USER }}
          TF_VAR_db_password    : ${{ secrets.DB_PASSWORD }}
          TF_VAR_db_name        : ${{ secrets.DB_NAME }}
        run: |
          terraform -chdir=ecs init -input=false
          terraform -chdir=ecs apply -auto-approve -input=false

      # 11) URL do ALB
      - name: Show URL
        working-directory: infra/ecs
        run: echo "::notice title=URL::$(terraform output -raw alb_dns)"
