name: Build, Push & Terraform Deploy

on:
  push:
    branches: [main, master]

env:
  AWS_REGION:   us-east-1
  SERVICE_NAME: client-service
  PORT:         8000

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Código
      - uses: actions/checkout@v4

      # 2. Credenciais temporárias da conta Academy
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region:            ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::049015295261:role/LabRole
          role-session-name: github-actions-deploy

      # 3. Login no ECR (gera outputs.registry)
      - name: Login no Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 4. Cria repositório se não existir
      - name: Ensure ECR repository
        run: |
          aws ecr describe-repositories \
              --repository-names ${{ env.SERVICE_NAME }} \
              --region ${{ env.AWS_REGION }} 2>/dev/null || \
          aws ecr create-repository \
              --repository-name ${{ env.SERVICE_NAME }} \
              --image-scanning-configuration scanOnPush=true \
              --region ${{ env.AWS_REGION }}

      # 5. Build & push
      - name: Build e push Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: |
            ${{ steps.ecr.outputs.registry }}/${{ env.SERVICE_NAME }}:${{ github.sha }}

      # 6. Terraform
      - uses: hashicorp/setup-terraform@v2
        with: { terraform_version: 1.7.5 }

      - name: Terraform init & apply
        working-directory: infra
        env:
          TF_VAR_aws_region     : ${{ env.AWS_REGION }}
          TF_VAR_service_name   : ${{ env.SERVICE_NAME }}
          TF_VAR_container_port : ${{ env.PORT }}
          TF_VAR_image_uri      : ${{ steps.ecr.outputs.registry }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          TF_VAR_execution_role : ${{ secrets.LAB_ROLE_ARN }}   # ex.: arn:aws:iam::123…:role/LabRole
          TF_VAR_db_host        : ${{ secrets.DB_HOST }}
          TF_VAR_db_port        : ${{ secrets.DB_PORT }}
          TF_VAR_db_user        : ${{ secrets.DB_USER }}
          TF_VAR_db_password    : ${{ secrets.DB_PASSWORD }}
          TF_VAR_db_name        : ${{ secrets.DB_NAME }}
        run: |
          terraform init -input=false
          terraform apply -auto-approve -input=false

      # 7. Mostra a URL pública gerada
      - name: Show public URL
        working-directory: infra
        run: |
          echo "::notice title=App URL::$(terraform output -raw public_url)"
