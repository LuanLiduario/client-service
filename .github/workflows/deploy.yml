name: Deploy AWS – Client-Service
on: [push]

env:
  AWS_REGION: us-east-1
  SERVICE_NAME: client-service
  PORT: 8000

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
# 1  Checkout
    - uses: actions/checkout@v4

# 2  Credenciais (voclabs) – ainda precisa ecr:GetAuthorizationToken
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region:            ${{ env.AWS_REGION }}
        role-skip-session-tagging: true

# 3  Descobre Account-ID
    - id: awsid
      run: echo "ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV
      # docs sts get-caller-identity :contentReference[oaicite:3]{index=3}

# 4  Terraform init/apply (apenas repositório)
    - uses: hashicorp/setup-terraform@v2
      with: { terraform_version: 1.7.5 }

    - name: Terraform ECR
      working-directory: infra/ecr
      env:
        TF_VAR_aws_region    : ${{ env.AWS_REGION }}
        TF_VAR_ecr_repo_name : ${{ env.SERVICE_NAME }}
      run: |
        terraform init -input=false
        terraform apply -auto-approve -input=false || \
        terraform import aws_ecr_repository.app_repo ${SERVICE_NAME}

# 5  Calcula REPO_URL **antes** do login/build
    - id: repo
      run: echo "REPO_URL=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${SERVICE_NAME}" >> $GITHUB_ENV

# 6  Login ECR (GetAuthorizationToken – precisa permissão) :contentReference[oaicite:4]{index=4}
    - run: |
        aws ecr get-login-password --region $AWS_REGION | \
        docker login --username AWS --password-stdin $REPO_URL

# 7  Build & Push (docker já está no runner) :contentReference[oaicite:5]{index=5}
    - uses: docker/setup-buildx-action@v3
    - uses: docker/build-push-action@v5
      with:
        push: true
        tags: ${{ env.REPO_URL }}:${{ github.sha }}

# 8  Importa ALB/TG se já existirem
    - name: Importar recursos existentes
      working-directory: infra/ecs
      run: |
        terraform init -input=false
        terraform import -allow-missing aws_lb.app $(aws elbv2 describe-load-balancers --names "${SERVICE_NAME}-alb" --query 'LoadBalancers[0].LoadBalancerArn' --output text 2>/dev/null) || true
        terraform import -allow-missing aws_lb_target_group.tg $(aws elbv2 describe-target-groups --names "${SERVICE_NAME}-tg" --query 'TargetGroups[0].TargetGroupArn' --output text 2>/dev/null) || true

# 9  Terraform infra ECS/ALB
    - name: Terraform ECS/ALB
      working-directory: infra/ecs
      env:
        TF_VAR_aws_region     : ${{ env.AWS_REGION }}
        TF_VAR_service_name   : ${{ env.SERVICE_NAME }}
        TF_VAR_container_port : ${{ env.PORT }}
        TF_VAR_image_uri      : ${{ env.REPO_URL }}:${{ github.sha }}
        TF_VAR_exec_role_name : LabRole
        TF_VAR_db_host        : ${{ secrets.DB_HOST }}
        TF_VAR_db_port        : ${{ secrets.DB_PORT }}
        TF_VAR_db_user        : ${{ secrets.DB_USER }}
        TF_VAR_db_password    : ${{ secrets.DB_PASSWORD }}
        TF_VAR_db_name        : ${{ secrets.DB_NAME }}
      run: |
        terraform apply -auto-approve -input=false

# 10 URL do ALB
    - name: Show URL
      working-directory: infra/ecs
      run: echo "::notice title=URL::$(terraform output -raw alb_dns)"
